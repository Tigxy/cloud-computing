name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, microservice-architecture ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  DEPLOYMENT_NAME: discord-bot # TODO: update deployment name if changed in deployment.yaml
  INGRESS_IP: "10.1.2.10"
  BOT_COMMAND_PREFIX: "!"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "continuous_integration"
  continuous_integration:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Start to test and build the artifact

      # Declare variables to store branch name and short Git commit SHA
      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # Boot Docker builder using by default the docker-container
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # Login to DockerHub account
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # ================================== BUILDING MICROSERVICES ==================================
      
      # Build a Docker image based on provided Dockerfile
      - name: Build and push discord main service
        id: docker_build_main
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/main
          push: true
          tags: ticks/discord-bot:${{ steps.vars.outputs.sha_short }}
      
      # Build a Docker image based on provided Dockerfile
      - name: Build and push discord echo service
        id: docker_build_echo
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/echo
          push: true
          tags: ticks/microservices-echo:${{ steps.vars.outputs.sha_short }}
      
      # Build a Docker image based on provided Dockerfile
      - name: Build and push discord math service
        id: docker_build_math
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/math
          push: true
          tags: ticks/microservices-math:${{ steps.vars.outputs.sha_short }}
      
      # Build a Docker image based on provided Dockerfile
      - name: Build and push discord time service
        id: docker_build_time
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/time
          push: true
          tags: ticks/microservices-time:${{ steps.vars.outputs.sha_short }}

      # Build a Docker image based on provided Dockerfile
      - name: Build and push discord stress service
        id: docker_build_stress
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/stress
          push: true
          tags: ticks/microservices-stress:${{ steps.vars.outputs.sha_short }}

      # Build a Docker image based on provided Dockerfile
      - name: Build and push binary service
        id: docker_build_binary
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/binary
          push: true
          tags: ticks/microservices-binary:${{ steps.vars.outputs.sha_short }}

      # Build a Docker image based on provided Dockerfile
      - name: Build and push binary-rs service
        id: docker_build_binary_rs
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/microservices/binary-rs
          push: true
          tags: ticks/microservices-binary-rs:${{ steps.vars.outputs.sha_short }}
      # ================================== DONE ==================================
      
      - name: Replace tokens with secrets
        shell: bash
        run: |- 
          cd ${{ github.workspace }}/microservices
          for d in */ ; do
              [ -L "${d%/}" ] && continue
              echo "replace placeholders for $d microservice.."
              sed -i "s/<TAG>/${{ steps.vars.outputs.sha_short }}/g" "$d/deployment.yaml"
              sed -i "s/<DOCKER_USER>/${{ secrets.DOCKERHUB_USERNAME }}/g" "$d/deployment.yaml"
              sed -i "s/<INGRESS_IP>/$INGRESS_IP/g" "$d/deployment.yaml"
              sed -i "s/<DISCORD_TOKEN>/${{ secrets.DISCORD_TOKEN }}/g" "$d/deployment.yaml"
              sed -i "s/<BOT_COMMAND_PREFIX>/$BOT_COMMAND_PREFIX/g" "$d/deployment.yaml"
          done
        
    #  # Log into Azure
    #  - uses: azure/aks-set-context@v1
    #    with:
    #        creds: '${{ secrets.AZURE_CREDENTIALS }}'
    #        resource-group: 'cloud-computing'
    #        cluster-name: 'cloud-computing'
    #    id: login
    #

    #  # Deploy the bot
    #  - uses: Azure/k8s-deploy@v1.4
    #    with:
    #      manifests: |
    #          ${{ github.workspace }}/microservices/deployment.yaml
    #      images: 'ticks/discord-bot:${{ steps.vars.outputs.sha_short }}'
    #      kubectl-version: 'latest'

    # Follow https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-google-kubernetes-engine
    # https://github.com/google-github-actions/setup-gcloud/blob/master/example-workflows/gke/.github/workflows/gke.yml

      # Install gcloud, do not specify authentication.
      - uses: 'google-github-actions/setup-gcloud@master'
        with:
          project_id: '${{ secrets.GKE_PROJECT }}'

      # Authentication via credentials json
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GKE_SA_KEY }}'

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "${{ secrets.GKE_CLUSTER }}" --zone "${{ secrets.GKE_ZONE }}"
          gcloud container clusters update "${{ secrets.GKE_CLUSTER }}" --zone "${{ secrets.GKE_ZONE }}" --enable-vertical-pod-autoscaling

      # Deleting the namespace leads to deleting everything related to the previous deployment
      # This is to avoid any race conditions where not-recreated k8s objects lead to problems
      - name: Delete previous deployment
        run: |-
          kubectl delete namespace k8s-discord --ignore-not-found=true

      # Deploy image to the GKE cluster
      - name: Deploy
        run: |-
          kubectl apply -f ${{ github.workspace }}/microservices/namespace.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/main/deployment.yaml
          
          sleep 30s
          
          kubectl apply -f ${{ github.workspace }}/microservices/time/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/echo/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/binary/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/binary-rs/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/math/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/stress/deployment.yaml
          kubectl apply -f ${{ github.workspace }}/microservices/stress/vpa.yaml
          
          kubectl apply -f ${{ github.workspace }}/ingress_gcloud.yaml
          
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n k8s-discord
          kubectl get services -o wide

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, github-ci ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "continuous_integration"
  continuous_integration:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Start to test and build the artifact

      # Declare variables to store branch name and short Git commit SHA
      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # Boot Docker builder using by default the docker-container
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      # Login to DockerHub account
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build a Docker image based on provided Dockerfile
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.workspace }}/src/bot
          push: true
          tags: ticks/discord-bot:${{ steps.vars.outputs.sha_short }}
      
      # Log into Azure
      - uses: azure/aks-set-context@v1
        with:
            creds: '${{ secrets.AZURE_CREDENTIALS }}'
            resource-group: 'cloud-computing'
            cluster-name: 'cloud-computing'
        id: login

      # Provide the discord access token for the bot by replacing the placeholder
      - name: Set discord access token
        shell: bash
        run: sed -i "s/<SECRET_DISCORD_TOKEN>/${{ secrets.DISCORD_TOKEN }}/gp" ${{ github.workspace }}/src/bot/pod.yaml

      # Deploy the bot
      - uses: Azure/k8s-deploy@v1.4
        with:
          manifests: |
              ${{ github.workspace }}/src/bot/pod.yaml
          images: 'ticks/discord-bot:${{ steps.vars.outputs.sha_short }}'
          kubectl-version: 'latest'


